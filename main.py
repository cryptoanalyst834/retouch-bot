import logging
import cv2
import numpy as np
from io import BytesIO
from PIL import Image
import os
import json
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)
from dotenv import load_dotenv

load_dotenv()

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

RETOUCH_WAITING_FOR_IMAGE = 1
RETOUCH_WAITING_FOR_OPTION = 2
ALLOWED_EXTENSIONS = ['.jpg', '.jpeg', '.heic']
MAX_FREE_RETOUCHES = 5
ADMIN_IDS = [743050845]

INSTRUCTIONS_TEXT = (
    "üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ *—Ñ–∞–π–ª–æ–º*, –Ω–µ —Å–∂–∏–º–∞—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.\n\n"
    "üì± –¢–µ–ª–µ—Ñ–æ–Ω: –°–∫—Ä–µ–ø–∫–∞ ‚Üí –§–∞–π–ª ‚Üí –ì–∞–ª–µ—Ä–µ—è ‚Üí –û—Ç–ø—Ä–∞–≤–∏—Ç—å.\n"
    "üñ• –ü–ö: –°–∫—Ä–µ–ø–∫–∞ ‚Üí –í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª ‚Üí –£–±—Ä–∞—Ç—å –≥–∞–ª–æ—á–∫—É '–°–∂–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ' ‚Üí –û—Ç–ø—Ä–∞–≤–∏—Ç—å.\n\n"
    "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã JPG/JPEG/HEIC."
)

USERS_FILE = "users.json"
def load_users():
    if os.path.exists(USERS_FILE):
        with open(USERS_FILE, 'r') as f:
            return json.load(f)
    return {}

def save_users(data):
    with open(USERS_FILE, 'w') as f:
        json.dump(data, f)

users_data = load_users()

def get_user_data(user_id):
    user_id = str(user_id)
    if user_id not in users_data:
        users_data[user_id] = {"count": 0, "is_pro": False}
        save_users(users_data)
    return users_data[user_id]

def increment_user_count(user_id):
    user = get_user_data(user_id)
    user["count"] += 1
    save_users(users_data)

def user_has_access(user_id):
    user = get_user_data(user_id)
    return user["is_pro"] or user["count"] < MAX_FREE_RETOUCHES

def user_is_pro(user_id):
    return get_user_data(user_id).get("is_pro", False)

def set_user_pro(user_id, value: bool):
    user = get_user_data(user_id)
    user["is_pro"] = value
    save_users(users_data)

def reset_user_count(user_id):
    user = get_user_data(user_id)
    user["count"] = 0
    save_users(users_data)

# === Telegram Admin Handlers ===
async def admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ ‚ùå")
        return

    report = [f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users_data)}"]
    for uid, data in users_data.items():
        report.append(f"{uid}: Pro={data['is_pro']}, –û–±—Ä–∞–±–æ—Ç–∫–∏={data['count']}")
    await update.message.reply_text("\n".join(report))

async def setpro(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ ‚ùå")
        return
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setpro user_id")
        return
    try:
        target_id = int(context.args[0])
        set_user_pro(target_id, True)
        await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id} –≤—ã–¥–∞–Ω Pro ‚úÖ")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

async def revokepro(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ ‚ùå")
        return
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /revokepro user_id")
        return
    try:
        target_id = int(context.args[0])
        set_user_pro(target_id, False)
        await update.message.reply_text(f"Pro-–¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id} —É–¥–∞–ª—ë–Ω ‚ùå")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

async def resetcount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ ‚ùå")
        return
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /resetcount user_id")
        return
    try:
        target_id = int(context.args[0])
        reset_user_count(target_id)
        await update.message.reply_text(f"–°—á—ë—Ç—á–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id} —Å–±—Ä–æ—à–µ–Ω üîÑ")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")
